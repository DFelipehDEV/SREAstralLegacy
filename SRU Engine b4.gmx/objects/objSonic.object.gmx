<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprSonic</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objPlayer</parentName>
  <maskName>maskMain</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Variables</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>        boost_amount = 120;
        stgfinished=0
        playermove = true
        canboost  = true
        step_1                  = 0;
        step_2                  = 0;
        slidepass=false
        MHGanimation=false
punch=0;
        gamepad_set_axis_deadzone(0,0.7)
        size=1
        footstepsound1=snd_footstep_1
        footstepsound2=snd_footstep_2
        canairdash=true
        telex=x
        teley=y
        bouncing=false
        bouncedtimes=0
        pipe=0;
        homdist=150
        rainbowring=0
        can_stomp=true
        freeze=0
        homing=0
        allowseq=1;
        indash = false;
        seq=0;
        lightdash=0;
        slide=0
        slide_decc=0.32
        x_speed                 =   0;              // x speed
        top_x_speed             =   12.13;             // top x speed when running on flat ground
        max_x_speed             =   17;             // max x speed
        x_acceleration          =   0.13;           // acceleration / deacceleration
        slope_decc_factor       =   0.15;           // slope deacceleration factor
        
        crouch_down_timer       =   0;              // timer with stores how much time the char. is crouched
        look_up_timer       =   0;
        stomp_timer             =0;
         
        roll_decc_strong        =   0.07;           // deaccelerate while pressing the oppsite direction
        roll_decc               =   0.03;           // deacceleration value while rolling
        roll_decc_light         =   0.02;           // deaccelerate while pressing towards the same direction
        
        roll_decc_factor_up     =   0.05;           // slope deacceleration factor while rolling and going up
        roll_decc_factor_down   =   0.20;           // slope deacceleration factor while rolling and going down
        
        spindash_accumulator    =   4;              // spindash amount accumulator
        spindash_min_acc        =   6;              // spindash minium accumulator value
        spindash_max_acc        =   17;             // spindash maxium accumulator value
        
        look_shift_y            =   0;              // added y value to the camera for shifting (looking up/crouch down)     
        look_shift_x            =   0;
        
        y_speed                 =   0;              // y speed
        max_y_speed             =   16;             // max y speed (only affects when going down)
        y_acceleration          =   0.2;            // y acceleration / gravity
        conversion_factor       =   0.8;            // speed conversion factor when landed on the ground
        
        jump_strenght           =   -6.75;          // the jump strenght    
        skid_decc               =   0.56;             // deacceleration value while skidding    

        ground                  =   1;              // check wether the player is on the ground
        action                  =   0;              // determines the player current action
        angle                   =   0;              // current player angle
        angle_hold              =   0;              // angle holder, used for smoothing down angle change
        relative_angle          =   0;
        layer                   =   0;              // player current's "depth". This is used for paths and loops :)
        
        invincibility           =   0;              // 0 - Deactivated, 1 - Due to Inv. monitor, 2 - Hurt
        invincibility_timer     =   0;              // -1 for infinite
        shield                  =   0;              // 0 - None, 1 - Normal, 2 - Fire, 3 - Lighting, 4 - Water
        shield_usable           =   0;
        speed_sneakers          =   0;              // 0 - Deactivated, 2 - Due to Speed monitor
        speed_sneakers_timer    =   0;              // -1 for infinite
        
        slide_direction         =   0;
        slide_amount            =   1;
        slide_jump_force_x      = 4.2;
        slide_jump_force_y      =  -6;
        objPlayer.shield=0;
        
        transforming=false;
        
        normal                  = true;
        super                   = false;
        hyper                   = false;
        darkspine               = false;
        
        boosting                = false;
        
        lock_on                 = false;
        homed                   = false;
        
        player = global.player                
        
        cantchangedir = false;
        
        spindash_pitch = 1;
        
        allowxspeed=true
        allowyspeed=true
        airdashlock=false
        
        candoublejump=true
        
        changingtonormal=false
        last_y=y
        last_x=x
        
        
        
        flight_timer             = 0;
        flight_duration          = 330;
        
        glide_acceleration       = 0.04
        pallete_pos              = 0;

    //=====&gt;&gt; Action tokens      &lt;&lt;================
        
        action_normal           =   0;              // used for making easier the comprehension of the engine
        action_jumping          =   1;

        // ---------------------------------------------------------------------------------

        action_crouch_down      =   2;
        action_spindash         =   3;
        action_rolling          =   4;
        action_skid             =   5;
        action_pushing          =   6;
        action_lightdash        =   7;
        action_spring_jump      =   8;  
        action_stomping         =   9;

        // ---------------------------------------------------------------------------------

        action_hurt             =  -1;

        // ---------------------------------------------------------------------------------

        action_sliding          =  10;
        action_sliding_jump     =  11;

        // ---------------------------------------------------------------------------------

        action_spring_jump       =  20;
        action_super_spring_jump =  21;
        action_pipe              =  25;
        action_corkscrew         =  30;
        action_corkscrew_roll    =  31;
        action_spring_hor        =  32;

        // ---------------------------------------------------------------------------------

        action_shield           =  50;
        action_airfall          =  51;
        action_waterbounce      =  52;
        action_airdash          =  53;
        action_look_up          =  54;
        action_handle           =  55;
        action_bouncing         =  56;
        action_walljump         =  57;
        action_fly              =  58;
        action_flydown          =  59;
        action_tailwhip         =  60;
        action_flytoground      =  61;
        action_climb            =  62;
        action_climbrise        =  63;
        action_glideslide       =  64;
        action_glidedrop        =  65;
        action_glide            =  66;
        action_stompcrouch      =  67;
        action_dashed           =  68;
        action_trick            =  69;
        action_keyevents        =  70;
        action_debugmode        =  71;
        action_slide            =  72;
        action_transform        =  73
        action_punch            =  74
    //=====&gt;&gt; Input variables    &lt;&lt;================
        key_left                =   0;
        key_right               =   0;
        key_up                  =   0;
        key_down                =   0;
        key_action              =   0;
        key_boost               =   0;
        key_stomp               =   0;
        
        key_left_pressed        =   0;
        key_right_pressed       =   0;
        key_up_pressed          =   0;
        key_down_pressed        =   0;
        key_action_pressed      =   0;
        key_boost_pressed       =   0;
        key_stomp_pressed       =   0;
        key_bounce_pressed      =   0;
        
        
        assigned_key_left       =   vk_left;
        assigned_key_right      =   vk_right;
        assigned_key_up         =   vk_up;
        assigned_key_down       =   vk_down;
        assigned_key_action     =   ord("A");
        assigned_key_stomp      =   ord("D");
        assigned_key_boost      =   ord("S");
        assigned_key_bounce     =   ord("Q");
    
    //=========&gt;&gt;Objects&lt;&lt;======================
    global.Rings = 0;
    global.Score = 0;
    global.Time  = 0;
    
    
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Animation Sytem</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Animation_Init()
 // Initialize animation system.sprite_add_from_surface
   
        if(player == 1)
        {
        sprite = sprSonic;
        global.room_icon="sonic"
        }
        if(player == 2)
        {
           sprite = sprTails;
        }
        if(player == 3)
        {
        sprite= sprKnuckles
        }
        if(player == 4)
        {
        sprite= sprShadow
        global.room_icon="shadow"
        }
        animation                 = "";
        animation_previous        = "";
        animation_frame           = 0;
        animation_start           = 0;
        animation_end             = 0;
        animation_loop            = 0;
        animation_speed           = 0;
        animation_repeat          = 0;
        animation_repeat_times    = 0;
        animation_linked_to       = "";
        animation_flags_changed   = 0;
        animation_flags_finished  = 0;       
        animation_direction       = 1;
        animation_color           = c_white;
        animation_angle           = 0;
        animation_angle_mod       = 0;
        animation_alpha           = 1;
        animation_offset_x        = 0;
        animation_offset_y        = 0;
        animation_rendering_speed = 0;
        animation_frame_count     = 0;
        
                    if (ground)
            {
                // interpolate new angle when on small angle changes (resolves thikering in slopes)
                if (abs(angle-animation_angle)&lt;45) animation_angle = scrRotateTowardsAngle(angle,animation_angle, max(1, abs(x_speed)));
                else                               animation_angle = angle;
            }
            else animation_angle = scrRotateTowardsAngle(0,animation_angle,4);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Camera</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
    // Extra stuff. Create a camera object, because if we plug the view object directly
    // to Sonic, it might get some strange tickering because of how it rounds the position
    // of the objects.
    
    camera_object = instance_create(x,y, objCamera);
    
    // Direction
    animation_direction = 1;</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Create Death Object</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !stgfinished{
instance_create(x,y,objSonicDie);
objPlayer.dead = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>obj_stompfx</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>obj_jumpfx</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>can_stomp=true
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.Rings!=0){
global.Rings-=1
}else{
super=false
hyper=false
normal=true
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>animation="hurtback"
alarm[6]=30
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>playermove = true
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>airdashlock=false
if homed=false{
action=action_normal
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>action=action_normal
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>action=action_flytoground
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>allowxspeed=true
allowyspeed=true
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>homed = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Footsteps</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if player_collision_bottom_object(x, y, angle, maskMain, objGrassSurface){
footstepsound1=snd_footstep_grass1
footstepsound2=snd_footstep_grass2
}

if player_collision_bottom_object(x, y, angle, maskMain, objMetalSurface){
footstepsound1=snd_footstep_metal1
footstepsound2=snd_footstep_metal2
}

if animation = "idle"{

step_1 = 0;
step_2 = 0;
}
if ground{
if global.player=PLAYER_SONIC{
if animation = "walking"{
if animation_frame &gt;= 9 &amp;&amp; animation_frame &lt; 10 &amp;&amp; step_1 == 0
{
    audio_play_sou(choose(footstepsound1,footstepsound2),global.sfxvolume,1,false,1);
    step_1 = 1;
    step_2 = 0;
}
if animation_frame &gt;= 13 &amp;&amp; animation_frame &lt; 14 &amp;&amp; step_2 == 0
{
    audio_play_sou(choose(footstepsound1,footstepsound2),global.sfxvolume,1,false,1);
    step_1 = 0;
    step_2 = 1;
}
}

if animation = "jog"{
if animation_frame &gt;= 127 &amp;&amp; animation_frame &lt; 128 &amp;&amp; step_1 == 0
{
    audio_play_sou(choose(footstepsound1,footstepsound2),global.sfxvolume,1,false,1);
    step_1 = 1;
    step_2 = 0;
}
if animation_frame &gt;= 131 &amp;&amp; animation_frame &lt; 132 &amp;&amp; step_2 == 0
{
    audio_play_sou(choose(footstepsound1,footstepsound2),global.sfxvolume,1,false,1);
    step_1 = 0;
    step_2 = 2;
}
}
if animation = "jog2"{
if animation_frame &gt;= 18 &amp;&amp; animation_frame &lt; 19 &amp;&amp; step_1 == 0
{
    audio_play_sou(choose(footstepsound1,footstepsound2),global.sfxvolume,1,false,1);
    step_1 = 1;
    step_2 = 0;
}
if animation_frame &gt;= 22 &amp;&amp; animation_frame &lt; 23 &amp;&amp; step_2 == 0
{
    audio_play_sou(choose(footstepsound1,footstepsound2),global.sfxvolume,1,false,1);
    step_1 = 0;
    step_2 = 2;
}
}
if animation = "running"{
if animation_frame &gt;= 135 &amp;&amp; animation_frame &lt; 136 &amp;&amp; step_1 == 0
{
    audio_play_sou(choose(footstepsound1,footstepsound2),global.sfxvolume,1,false,1);
    step_1 = 1;
    step_2 = 0;
}
if animation_frame &gt;= 139 &amp;&amp; animation_frame &lt; 140 &amp;&amp; step_2 == 0
{
    audio_play_sou(choose(footstepsound1,footstepsound2),global.sfxvolume,1,false,1);
    step_1 = 0;
    step_2 = 1;
}
}
}else
if global.player=PLAYER_SHADOW{
if animation = "walking"{
if animation_frame &gt;= 10 &amp;&amp; animation_frame &lt; 11 &amp;&amp; step_1 == 0
{
    audio_play_sou(choose(footstepsound1,footstepsound2),global.sfxvolume,1,false,1);
    step_1 = 1;
    step_2 = 0;
}
if animation_frame &gt;= 14 &amp;&amp; animation_frame &lt; 15 &amp;&amp; step_2 == 0
{
    audio_play_sou(choose(footstepsound1,footstepsound2),global.sfxvolume,1,false,1);
    step_1 = 0;
    step_2 = 1;
}
}

if animation = "jog"{
if animation_frame &gt;= 132 &amp;&amp; animation_frame &lt; 133 &amp;&amp; step_1 == 0
{
    audio_play_sou(choose(footstepsound1,footstepsound2),global.sfxvolume,1,false,1);
    step_1 = 1;
    step_2 = 0;
}
if animation_frame &gt;= 136 &amp;&amp; animation_frame &lt; 137 &amp;&amp; step_2 == 0
{
    audio_play_sou(choose(footstepsound1,footstepsound2),global.sfxvolume,1,false,1);
    step_1 = 0;
    step_2 = 2;
}
}
if animation = "jog2"{
if animation_frame &gt;= 18 &amp;&amp; animation_frame &lt; 19 &amp;&amp; step_1 == 0
{
    audio_play_sou(choose(footstepsound1,footstepsound2),global.sfxvolume,1,false,1);
    step_1 = 1;
    step_2 = 0;
}
if animation_frame &gt;= 22 &amp;&amp; animation_frame &lt; 23 &amp;&amp; step_2 == 0
{
    audio_play_sou(choose(footstepsound1,footstepsound2),global.sfxvolume,1,false,1);
    step_1 = 0;
    step_2 = 2;
}
}
if animation = "running"{
if animation_frame &gt;= 135 &amp;&amp; animation_frame &lt; 136 &amp;&amp; step_1 == 0
{
    audio_play_sou(choose(footstepsound1,footstepsound2),global.sfxvolume,1,false,1);
    step_1 = 1;
    step_2 = 0;
}
if animation_frame &gt;= 139 &amp;&amp; animation_frame &lt; 140 &amp;&amp; step_2 == 0
{
    audio_play_sou(choose(footstepsound1,footstepsound2),global.sfxvolume,1,false,1);
    step_1 = 0;
    step_2 = 1;
}
}
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Animations</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    
        if action !=action_fly &amp;&amp; action !=action_flydown &amp;&amp; action!=action_flytoground &amp;&amp; action!=action_glide &amp;&amp; (action!=action_normal)&amp;&amp; animation!="airflight" &amp;&amp; animation!="airfall" &amp;&amp; animation!="airfall2"{
    if (x_speed &lt;0  &amp;&amp; cantchangedir = false) animation_direction = -1;
    if (x_speed &gt;0  &amp;&amp; cantchangedir = false) animation_direction = 1;
    }
if MHGanimation=true &amp;&amp; animation!="hpole"
animation="hpole"
    // Set the correct animation
    if ( action == action_normal &amp;&amp; ground == true &amp;&amp; MHGanimation=false)
    {
        
        if ( abs(x_speed) &gt; 0 &amp;&amp; abs(x_speed) &lt;= 5 &amp;&amp; animation != "walking" )
            animation = "walking";
            
            if ( abs(x_speed) &gt; 5 &amp;&amp; abs(x_speed) &lt;= 9  &amp;&amp; animation != "jog" )
            animation = "jog";   
            
             if ( abs(x_speed) &gt; 9 &amp;&amp; abs(x_speed) &lt;= 12.13  &amp;&amp; animation != "jog2" )
            animation = "jog2";   
            
        if ( abs(x_speed) &gt; 12.13 &amp;&amp; !darkspine &amp;&amp; animation != "running" )
            animation = "running";    
        else if ( abs(x_speed) &gt; 13.4 &amp;&amp; darkspine &amp;&amp; animation != "running" )
        animation = "running";    
            
        if ( x_speed == 0 &amp;&amp; animation != "idle" &amp;&amp; animation != "idle_wait" &amp;&amp; !key_left &amp;&amp; !key_right)
            animation = "idle";
            
        
            
    } else if MHGanimation=false{
        if ( action == action_jumping &amp;&amp; y_speed&lt;2.6 &amp;&amp; animation != "jumping" &amp;&amp; animation !="trick1" &amp;&amp; animation !="trick2" &amp;&amp; animation !="trick3" &amp;&amp; animation !="trick4" &amp;&amp; animation !="trick5" &amp;&amp; !lightdash)
            animation = "jumping";
            
            if action=action_jumping &amp;&amp; y_speed&gt;2.6 &amp;&amp; bouncing=false &amp;&amp; animation!="airfall"{
            if instance_exists(obj_jumpfx){
            with obj_jumpfx
            instance_destroy()
            }
            animation="airfall"
            }
            
        if ( action == action_crouch_down &amp;&amp; animation != "crouchdown" )
            animation = "crouchdown";
        if ( action == action_spindash &amp;&amp; animation != "spindash" )
            animation = "spindash";
        if ( action == action_rolling &amp;&amp; animation != "rolling" &amp;&amp; !lightdash)
            animation = "rolling";
        if (action == action_hurt &amp;&amp; !ground &amp;&amp; animation != "hurt")
            animation = "hurt";
            
        if (action == action_hurt &amp;&amp; ground &amp;&amp; animation != "hurtground")
            animation = "hurtground";
            
        if ( action == action_skid &amp;&amp; animation != "skidding")
            animation = "skidding";
        if ( (action == action_shield || action=action_airdash) &amp;&amp; animation != "jumping")
            animation = "jumping";
        if (action == action_sliding &amp;&amp; animation != "sliding")
            animation = "sliding";
        if (action == action_sliding_jump &amp;&amp; animation != "sliding_jump")
            animation = "sliding_jump";
        if (action == action_corkscrew &amp;&amp; animation != "corkscrew")
            animation = "corkscrew";
        if (action == action_corkscrew_roll &amp;&amp; animation != "rolling")
            animation = "rolling";
        if ( action == action_spring_jump &amp;&amp; animation != "spring_jump" &amp;&amp; y_speed &lt;0 )
            animation = "spring_jump";
        if ( action == action_spring_jump &amp;&amp; animation != "airfall" &amp;&amp; y_speed &gt;0 )
            animation = "airfall";    
        if (action = action_pushing &amp;&amp; ground &amp;&amp; animation!="push")    
            animation="push";
            
            if action = action_look_up &amp;&amp; animation !="lookup"
            animation = "lookup";
            
            if !ground &amp;&amp; !homing &amp;&amp; y_speed &gt;0 &amp;&amp; (action == action_normal|| action==action_spring_jump &amp;&amp; player=PLAYER_TAILS) &amp;&amp; animation != "airfall2" &amp;&amp; homed = false
            animation="airfall2";
            
            if !ground &amp;&amp; !homing &amp;&amp; y_speed &lt;0 &amp;&amp; (action == action_normal || action=action_spring_hor) &amp;&amp; animation != "airflight" &amp;&amp; homed = false
            animation="airflight";
            
            if (homing=1 &amp;&amp; (animation!="rolling" || animation ="trick1" || animation ="trick2" || animation ="trick3" || animation ="trick4" || animation ="trick5") &amp;&amp; !ground)
             animation="rolling";
             
             if (action = action_stomping &amp;&amp; animation !="stomping")
             animation = "stomping"
             if (action=action_transform &amp;&amp; animation!="transforming")
             animation="transforming"
             
            // if (action =action_airdash &amp;&amp; animation !="airdash" &amp;&amp; homed = false &amp;&amp; homing=0)
           //  animation = "airdash"
             
              if (!homing &amp;&amp; homed = true &amp;&amp; y_speed &lt; 0 &amp;&amp; !ground &amp;&amp; animation !="trick1" &amp;&amp; animation !="trick2" &amp;&amp; animation !="trick3" &amp;&amp; animation !="trick4" &amp;&amp; animation !="trick5")
             animation = choose("trick1","trick2","trick3","trick4","trick5")
             
             if action=action_fly &amp;&amp; animation !="flying"
             animation="flying"
             if action=action_flydown &amp;&amp; animation !="tired"
             animation="tired"
             
             if action==action_lightdash &amp;&amp; animation !="dashpanel" &amp;&amp; !ground
             animation = "dashpanel"
             
             if action=action_glide &amp;&amp; animation !="glide"
             animation="glide"
             
             if action=action_slide &amp;&amp; animation !="slide"
             animation="slide"
             
                   }
                   

        if (slide &amp;&amp; animation!="sliding") animation="sliding"
        if ground{
        if (animation_direction=1){
        if (y_speed&lt;1 &amp;&amp; player_collision_left_edge(x,y,5) &amp;&amp; !player_collision_right_edge(x,y,350) &amp;&amp; x_speed=0 &amp;&amp; animation!="balancingOut") animation="balancingOut";
        if (y_speed&lt;1 &amp;&amp; !player_collision_left_edge(x,y,5) &amp;&amp; player_collision_right_edge(x,y,350) &amp;&amp; x_speed=0 &amp;&amp; animation!="balancingIn") animation="balancingIn";
        }
        if (animation_direction=-1){
        if (y_speed&lt;1 &amp;&amp; player_collision_left_edge(x,y,5) &amp;&amp; !player_collision_right_edge(x,y,350) &amp;&amp; x_speed=0 &amp;&amp; animation!="balancingIn") animation="balancingIn";
        if (y_speed&lt;1 &amp;&amp; !player_collision_left_edge(x,y,5) &amp;&amp; player_collision_right_edge(x,y,350) &amp;&amp; x_speed=0 &amp;&amp; animation!="balancingOut") animation="balancingOut";
}
        }
        if (pipe &amp;&amp; animation!="rolling") animation="rolling";
        
        if animation = "running" &amp;&amp; ground
        animation_speed = 0.25+abs(x_speed)/64;
        
        if animation = "slide"
        animation_speed = 0.20+abs(x_speed)/45;
          if animation = "hpole"
        animation_speed = 0.11+abs(x_speed)/59;
        
        if (action = action_fly || action = action_flydown || action=action_tailwhip || action=action_flytoground || action=action_glide || action=action_normal) &amp;&amp; slide=0 &amp;&amp; animation!="airflight" &amp;&amp; animation!="airfall" &amp;&amp; animation!="airfall2"{
if key_left &amp;&amp; !key_right
animation_direction = -1
else if key_right &amp;&amp; !key_left
animation_direction = 1
}


        
         if (animation = "rolling" || animation = "idle" || animation = "crouchdown" || animation="spindash" || animation ="lookup") animation_angle           = 0
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>finish stage</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//We put that here to make useless the rest of step code

if (stgfinished=1){
if ground{
if animation!="skidding" animation="skidding"; boosting = false;
}
else{
if animation!="rolling" animation="rolling";
}
if x_speed&gt;0 x_speed-=.3
animation_direction=-1
if ((floor(x_speed)=0 || x_speed&lt;0) &amp;&amp; ground){ instance_create(x,y,playerFinish); boosting = false;
instance_destroy()}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Camera Shift</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//NEW Look-up
    if ( action == action_look_up &amp;&amp; look_up_timer &gt; 40 )
    {
    if (look_shift_y &gt; -(view_hview/2.9)) look_shift_y -= 8;
    } 
    
//NEW Look Down
    else if ( action == action_crouch_down &amp;&amp; crouch_down_timer &gt; 40 )
    {
        if (look_shift_y &lt; (view_hview/2.9)) look_shift_y += 8;
    }
    
        else {
        if (look_shift_y&gt;0) 
            look_shift_y -= 8;
        if (look_shift_y&lt;0) 
            look_shift_y += 8;
    }

  /*  if abs(x_speed)&gt;8.9 &amp;&amp; abs(look_shift_x)&lt;15{
    if animation_direction=1{
    look_shift_x+=1
    }else
    look_shift_x-=1   
    }else if abs(x_speed)&lt;8.9 &amp;&amp; abs(look_shift_x)&gt;15{
    if animation_direction=1{
    look_shift_x-=3
    }else
    look_shift_x+=3
    }
    
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Animation System</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>animation_core()
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Keep in Bounders</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//----------------------------------CAMERA---------------------------------
// Keep the player within the level's horizontal boundaries.
var _offset;
_offset = sprite_get_width(maskMain) div 2;
if (x &lt;= _offset &amp;&amp; x_speed &lt; 0.0)
{
    x_speed = 0;
    animation = "idle"
    x = _offset
}else
if (x &gt;= room_width - _offset &amp;&amp; x_speed &gt; 0.0)
{
    x_speed = 0;
    animation = "idle"
    x = room_width - _offset;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>last_y=y
last_x=x
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Keydata</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
    /* Get input data. Store them on variables for tracking them down
       easier :)
    */
        if playermove = true{
    key_left    =   keyboard_check( assigned_key_left ) || gamepad_axis_value(0,gp_axislh) &lt;0;
    key_right   =   keyboard_check( assigned_key_right )|| gamepad_axis_value(0,gp_axislh) &gt;0;
    key_up      =   keyboard_check( assigned_key_up )   || gamepad_axis_value(0,gp_axislv) &lt;0;
    key_down    =   keyboard_check( assigned_key_down ) || gamepad_axis_value(0,gp_axislv) &gt;0;
    key_action  =   keyboard_check( assigned_key_action ) || gamepad_button_check(0,gp_face1)
    key_boost   =   keyboard_check( assigned_key_boost )  || gamepad_button_check(0,gp_face3)
    key_stomp   =   keyboard_check( assigned_key_stomp )  || gamepad_button_check(0,gp_face2)
    
    key_left_pressed    =   keyboard_check_pressed( assigned_key_left )  || gamepad_button_check_pressed(0,gp_axislh)&lt;0;
    key_right_pressed   =   keyboard_check_pressed( assigned_key_right ) || gamepad_button_check_pressed(0,gp_axislh)&gt;0;
    key_up_pressed      =   keyboard_check_pressed( assigned_key_up )    || gamepad_button_check_pressed(0,gp_axislv) &lt;0;
    key_down_pressed    =   keyboard_check_pressed( assigned_key_down )  || gamepad_button_check_pressed(0,gp_axislv) &gt;0;
    key_action_pressed  =   keyboard_check_pressed( assigned_key_action )|| gamepad_button_check_pressed(0,gp_face1);
    key_stomp_pressed   =   keyboard_check_pressed( assigned_key_stomp ) || gamepad_button_check_pressed(0,gp_face2);
    key_boost_pressed   =   keyboard_check_pressed( assigned_key_boost ) || gamepad_button_check_pressed(0,gp_face3);
    key_bounce_pressed   =   keyboard_check_pressed( assigned_key_bounce)|| gamepad_button_check_pressed(0,gp_face4);
    
    key_boost_released   =   keyboard_check_released( assigned_key_boost)|| gamepad_button_check_released(0,gp_face4);
    
    }
    else if playermove = false{
    key_left            =  0;
    key_right           =   0;
    key_up              =   0;
    key_down            =   0;
    key_action          =   0;
    key_boost           =   0;
    
    key_left_pressed    =   0;
    key_right_pressed   =   0;
    key_up_pressed      =   0;
    key_down_pressed    =   0;
    key_action_pressed  =   0;
    key_stomp_pressed   =   0;
    key_boost_pressed   =   0;
    key_bounce_pressed  =   0;
    
    key_boost_released  =   0;
    x_speed = 0;
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Physics</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if darkspine=true{
x_acceleration          =   0.215;
top_x_speed             =   14.4;
max_x_speed             =   19; 
}

if player=PLAYER_KNUX{
if action!=action_glide &amp;&amp; action!=action_climb{
y_acceleration=0.2
}
else if action=action_climb{
y_acceleration=0
}
jump_strenght           =   -6.37;
top_x_speed             =   11.9; 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Movement</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if allowyspeed=false || airdashlock
y_speed=0

if allowxspeed=false
x_speed=0

if(action=action_debugmode) exit;

if abs(x_speed)&gt;max_x_speed
x_speed=max_x_speed*animation_direction
    // movement control
    
    // ========== PART 1 ==============================================================================================        
        /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         -&gt; X movement.
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        */
      if (seq=0 &amp;&amp; freeze=0){          
      if !pipe ||(!key_left &amp;&amp; !key_right){ 
       x   +=  cos(degtorad(angle)) * x_speed;
       y   -=  sin(degtorad(angle)) * x_speed;
       }
                                      
             // move the player outside in case he has got stuck into the wall
            while (x_speed &gt; 0 &amp;&amp; player_collision_right( x, y, angle, maskMid ) == true )
            {
               
                x   -=  cos(degtorad(angle));
                y   +=  sin(degtorad(angle));
            }
            
            while (x_speed &lt; 0 &amp;&amp; player_collision_left( x, y, angle, maskMid ) == true )
            {
                
                x   +=  cos(degtorad(angle));
                y   -=  sin(degtorad(angle));
            }

    // ========== PART 2 ==============================================================================================        
        /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         -&gt; Y movement.
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        */
        
        if (ground == false)
        {
           
       if !pipe   y   +=  y_speed;
               
               
           if (y_speed &lt;= 0 &amp;&amp; player_collision_top(x, y, 0, maskBig ) == true &amp;&amp; ground == false)
                {
                    if ( player_collision_left_edge( x, y, 180 ) &amp;&amp; player_collision_right_edge( x, y, 180 ) )
                    {
                        player_set_angle(player_get_angle( x, y, 180 ));
                            
                        if (relative_angle &lt; 170 || relative_angle &gt; 190)
                        {
                            x_speed =   -sin(degtorad(relative_angle)) * (y_speed*1.5);
                            ground  =   true;
                        }
                        else player_set_angle(global.gravity_angle);
                    }
                }

            
             // move the player outside in case he has got stuck into the floor or the ceiling           
                while (y_speed &lt; 0 &amp;&amp; player_collision_top( x, y, 0, maskMid ) == true )
                {
                    y   +=  1;
                }            

                while (y_speed &gt; 0 &amp;&amp; player_collision_bottom( x, y, 0, maskMid ) == true )
                {
                    y   -=  1;
                }
                
                // check for landing
                if (y_speed &gt;= 0 &amp;&amp; player_collision_bottom( x, y, 0, maskBig ) == true)
                {
                    if ( player_collision_left_edge( x, y, 0 ) &amp;&amp; player_collision_right_edge( x, y, 0 ) )
                        angle   =   player_get_angle( x, y, 0 );
                    else
                        angle   =   0;
                        
                    x_speed -=  sin(degtorad(angle)) * y_speed;
                    y_speed =   0;
                    ground  =   true;
                    
                    // return to the normal state if the character was hurt
                    if (action == action_hurt &amp;&amp; animation_frame=animation_end)
                    {
                    action = action_normal;
                    }
                    
                    // return to the normal state if the character was jumping
                    if (action == action_jumping &amp;&amp; !bouncing || action=action_spring_hor || action==action_fly || action==action_flydown || action==action_flytoground ||action==action_dashed || action==action_lightdash)
                    {
                        action = action_normal;
                    }
                }
            
            // wall collision (yeah, again, we should perform that since the y axys has recently changed)
            while (player_collision_right( x, y, angle, maskMid ) == true )
            {
                x   -=  cos(degtorad(angle));
                y   +=  sin(degtorad(angle));
            }
            
            while (player_collision_left( x, y, angle, maskMid ) == true )
            {
                x   +=  cos(degtorad(angle));
                y   -=  sin(degtorad(angle));
            }
        }
}
    // ========== PART 3 ==============================================================================================        
        /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         -&gt; Slopes!
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        */
        if (ground == true)
        {
            if ( player_collision_main( x, y ) )
            {
                do
                {
                    x   -=  sin(degtorad(angle));
                    y   -=  cos(degtorad(angle));
                } until ( !player_collision_main( x, y ) )
            }
            if ( player_collision_slope( x, y, angle, maskMid ) &amp;&amp; !player_collision_main( x, y ) )
            {
                do
                {
                    x   +=  sin(degtorad(angle));
                    y   +=  cos(degtorad(angle));
                } until ( player_collision_main( x, y ) )
            }
        }

    // ========== PART 4 ==============================================================================================        
        /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         -&gt; Other stuff
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        */
        
        // fall if there isn't enough speed
        if (angle &gt; 80 &amp;&amp; angle &lt; 280 &amp;&amp; ground == true &amp;&amp; abs(x_speed) &lt; 3 &amp;&amp; slide=0)
        {
            y_speed =   -sin(degtorad(angle))*x_speed;
            x_speed =   cos(degtorad(angle))*x_speed;
            ground  =   false;
        }
        
        if (angle &gt; 90 &amp;&amp; angle &lt; 270 &amp;&amp; ground == true &amp;&amp; abs(x_speed) &lt; 3 &amp;&amp; slide=1)
        {
            y_speed =   -sin(degtorad(angle))*x_speed;
            x_speed =   cos(degtorad(angle))*x_speed;
            ground  =   false;
        }

        
        // fall off the ground if the edges aren't colliding
        if (ground == true &amp;&amp; angle != 0 &amp;&amp;
            (player_collision_left_edge( x, y, angle ) == false || player_collision_right_edge( x, y, angle ) == false  ))
        {
            y_speed =   -sin(degtorad(angle))*x_speed;
            x_speed =   cos(degtorad(angle))*x_speed;
            ground  =   false;
        }        
        
        // get new angle
        if (ground == true &amp;&amp; player_collision_left_edge( x, y, angle ) &amp;&amp; player_collision_right_edge( x, y, angle ))
        {
            // Store the new angle
            angle_holder   =   player_get_angle( x, y, angle );
            
            // Check if difference is less than 45. If it is, linear interpolate the angle, so it results on smoother rotation.
            // Otherwise, set the new angle normally. Remember that linear interpolation formula is the next:
            //
            // final = a*t + b*(1-t); where t is the interpolation value, wich goes from 0 to 1
            //
            // There's also a shorter and faster method, wich is the one we're going to use:
            //
            // final = a + (b-a)*t;
            
            if (abs(angle-angle_holder)&lt;45) angle = angle + (angle_holder-angle)*0.5;
            else                            angle = angle_holder;
        } else {
            angle   =   0;
        }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Slide Passes</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>        //Left Slide Sensor
        objHandle = player_collision_main_object(x, y, objSlideSensorLeft);
        if (objHandle != noone &amp;&amp; action =action_slide)
        {
        slidepass=true
        }
        
        //Right Slide Sensor
        objHandle = player_collision_main_object(x, y, objSlideSensorRight);
        if (objHandle != noone &amp;&amp; action =action_slide)
        {
        slidepass=true
        }
        
        //Leave Slide Sensor
        objHandle = player_collision_main_object(x, y, objSlideSensorLeave);
        if (objHandle != noone)
        {
        slidepass=false
        }
        
        objHandle = player_collision_main_object(x, y, objSlidePass);
        if (objHandle != noone &amp;&amp; action=action_slide)
        {
        slidepass=true
        }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Actions/Gameplay</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>player_action_debugmode()
player_action_sliding()
if player = PLAYER_SONIC || player = PLAYER_SHADOW{
player_airdash()
player_lightdash()
}
if player=PLAYER_SONIC{
player_stomp()
}
if player = PLAYER_TAILS{
player_fly()
player_tailwhip()
player_bounce()
}
if player = PLAYER_KNUX{
player_knuckles_skills()
}

if action=action_pushing &amp;&amp; (!key_left || !key_right)
action=action_normal
 
player_movements()   

if !pipe{
if ground shield_usable=0;
if (action=action_jumping) shield_usable=1;
        
if player=PLAYER_SONIC || player = PLAYER_SHADOW{
player_homing();
player_doublejump()
}      
player_action_jump();

player_action_crouch();

player_action_spindash();

player_action_look_up();
        
player_action_roll();

player_action_skid();

player_action_grind();

player_action_hurt()
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Monitors</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>                //Monitor Up
        objHandle = player_collision_bottom_object(x, y, angle, maskMain, objMonitor)
        if (objHandle != noone)
        {            
            if (action == action_jumping || action==action_glide || homing){                                 
                    
                // Bounce
                    if (y_speed&gt;0)
                    {                       
                    if (key_action) y_speed = -y_speed*1;
                    else            y_speed = -y_speed*0.91;                        
                    }
                    ground  =  false;
                     if homing{ y_speed=-6;x_speed=0;homing=0;motion_set(0,0);action=action_normal; shield_usable=1 homed = true;if distance_to_object(obj_homingfx)&lt;2{with (obj_homingfx) instance_destroy()}}                
                    // Destroy enemy
                    with(objHandle) instance_destroy();         
                    }     
            }
            
            
            //Monitor Left and Right
            if (x_speed &gt; 0)
            objHandle = player_collision_right_object(x, y, angle, maskBig, objMonitor);
            else if (x_speed &lt; 0)
            objHandle = player_collision_left_object(x, y, angle, maskBig, objMonitor);
            
        if (objHandle != noone)
        {            
            if (action == action_rolling || action==action_glide){                                                                                         
                    // Destroy monitor
                    with(objHandle) instance_destroy();         
                    }     
            }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Layering</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
    // Layering. Change layer
    if (place_meeting(x, y, objLayerToLow))  layer = 0;
    if (place_meeting(x, y, objLayerToHigh)) layer = 1;
    if (ground &amp;&amp; place_meeting(x, y, objLayerSwitch))
    {
        if (x_speed &gt; 0) layer = 1;
        if (x_speed &lt; 0) layer = 0;
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Object Handle</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>        //w
        objHandle = player_collision_main_object(x, y, objEnemy);
        if (objHandle != noone)
        {                             
            if (action == action_rolling || action == action_jumping || action == action_spindash
                || action == action_shield || action=action_airdash || action=action_stomping
                || invincibility == 1 || invincibility == 3 || homing || boosting ||punch)
                {   
                // Bounce
                    if (!ground &amp;&amp; y_speed&gt;0)
                    {
                       
                    if (key_action) y_speed = -y_speed*1.15;
                        else            y_speed = -y_speed*0.99;
                        
                    }              
                    if homing{ y_speed=-6;x_speed=0;homing=0;motion_set(0,0);action=action_normal; shield_usable=1 homed = true; if distance_to_object(obj_homingfx)&lt;2{with (obj_homingfx) instance_destroy()}}  
                    instance_create(x,y-2,objOrb)
                   instance_create(x,y-2,objOrb)
                   instance_create(x,y-2,objOrb)
                    // Destroy enemy
                    with(objHandle)instance_destroy()                    
                } else player_hurt();          
        }      
        
                //w
        objHandle = player_collision_main_object(x, y, objHPenemy);
        if (objHandle != noone)
        {                               
            if (action == action_rolling || action == action_jumping || action == action_spindash
                || action == action_shield || action=action_airdash || action=action_stomping
                || invincibility == 1 || invincibility == 3 || homing || boosting ||punch)
                {   
                // Bounce
                    if (!ground &amp;&amp; y_speed&gt;0)
                    {
                       
                    if (key_action) y_speed = -y_speed*1.15;
                        else            y_speed = -y_speed*0.99;
                        
                    }              
                    if homing{ y_speed=-6;x_speed=0;homing=0;motion_set(0,0);action=action_normal; shield_usable=1 homed = true; if distance_to_object(obj_homingfx)&lt;2{with (obj_homingfx) instance_destroy()}}  

                    // Destroy enemy
                    with(objHandle) HP-=1                    
                } else player_hurt();          
        }      
        
           
        //ww
        objHandle = player_collision_main_object(x, y, objRing);
        if (objHandle != noone &amp;&amp; action != action_hurt)
        {
            with(objHandle) 
            {
                collected = true;
                instance_destroy();
            }
            global.Rings += 1;
            audio_play_sou(sndRing,global.sfxvolume,1,false,0)
            if instance_exists(objRing) ==true{
            if boost_amount &lt;120 &amp;&amp; objRing.motion=false
                boost_amount += 5
                }
        }
       
        
        
        
        //Light Ring
        objHandle = player_collision_main_object(x, y, objLightRing);
        if (objHandle != noone )
        {
        if lightdash==true{
        x=objHandle.x;y=objHandle.y;   
        } 
        global.Rings +=1
        with(objHandle) 
            {
                
                instance_destroy();
            }
            
                        audio_play_sou(sndRing,global.sfxvolume,1,false,0)
        }
        //10 Rings
        objHandle = player_collision_main_object(x, y, objRing10);
        if (objHandle != noone &amp;&amp; action != action_hurt)
        {
            with(objHandle) 
            {
                collected = true;
                instance_destroy();
            }
            global.Rings += 10;
            audio_play_sou(sndRing10,global.sfxvolume,1,false,0)
            if boost_amount &lt;120
                boost_amount += 10
        }
        
        //Corkscrew
if(action = action_corkscrew)
 {
  /* Initalize the Corkscrew Object: */
  var corkscrew_object;
  corkscrew_object = player_collision_main_object(x,y,objCorkscrew);
  
  /* Check Speed and Action and do stuff: */
   if( corkscrew_object == noone || corkscrew_object != noone &amp;&amp; abs(x_speed) &lt;4) { action = action_normal };
    else 
    {
     var relative_position, angle_in_corkscrew;
      relative_position = x - corkscrew_object.x;
      angle_in_corkscrew = degtorad( (x/384)*360 );
      
       /* Set position according to the relative position of the corkscrew */
        y = corkscrew_object.y + 26 + ( 1+cos(angle_in_corkscrew) )*( 75*0.5 );
        
       /* Change animation frame depending on the angle */
       if ( action == action_corkscrew ) {animation="corkscrew";animation_frame = animation_start+abs( (radtodeg(angle_in_corkscrew)/360*11) mod 12) };
    };
};
   else if( abs(x_speed) &gt;= 6 &amp;&amp; ground == true &amp;&amp; player_collision_main_object(x,y,objCorkscrew) != noone )
    {      
      /* Common Stuff */
      action = action_corkscrew
      ground = false;
      player_set_angle(0);
    };

            if(animation == "corkscrew")
    {
       animation_frame += .05;
    }
        
        // ---- Bumpers ------------------------------------------------------------------------------
        objHandle = player_collision_main_object(x, y, objBumper);
        if (objHandle != noone)
        {
            // Get the angle between the bumper and Sonic and then reset the and y speeds
            angle_to_bumper = degtorad(round(wrap_angle(point_direction(x, y, objHandle.x, objHandle.y)-90)/22.5)*22.5);
            x_speed = sin(wrap_angle(angle_to_bumper-global.gravity_angle))*7;
            y_speed = cos(wrap_angle(angle_to_bumper-global.gravity_angle))*7;

            objHandle.alarm[0]    = 20;
            objHandle.image_speed = 0.5;
            ground = false;
            global.Score += 10;
            audio_play_sou(sndBumper,global.sfxvolume,1,false,0)
                
}

        // ---- Baloons ------------------------------------------------------------------------------
        objHandle = player_collision_main_object(x, y, objBaloon1);
        if (objHandle != noone)
        {
        with objHandle{
        instance_destroy()
        }
            ground = false;
            y_speed=-4
            if homing{ y_speed=-5.5;x_speed=3.7*animation_direction;homing=0;motion_set(0,0);action=action_normal; shield_usable=1; homed = true; if distance_to_object(obj_homingfx)&lt;2{with (obj_homingfx) instance_destroy()}}
            audio_play_sou(sndBumper,global.sfxvolume,1,false,0)
                
}
//-----------------------------------
objHandle = player_collision_main_object(x, y, objSequenceStart);
if (objHandle != noone){
if (allowseq &amp;&amp; x_speed&gt;0 &amp;&amp; y_speed&lt;0){     //make the sequence only when we're going to the right and up
if seq=0{
scrCreateButtonSequence();
seq=1;
allowseq=0;
}
}
}
//-------------------------------------------

//--------------------------PipeS-----------------------------
objHandle = player_collision_main_object(x,y,objPipe);   //In the case we collide
if (objHandle !=noone){
if pipe=0 pipe=1;
if objHandle.aux=0{
x_speed=0
y_speed=0
x=objHandle.x;                                               // we need to align sonic (just one time!!!)
y=objHandle.y;
objHandle.aux=1;
}
speed=7                                                 //and then, we set the speed
direction=objHandle.dir;                              //and the direction of the pipe
}

objHandle=player_collision_main_object(x,y,pipeEnd);

if (objHandle!=noone){
if pipe{
x_speed=cos(degtorad(direction))*8;              //that's to keep moving more or less at the same velocity when we end a pipe
y_speed=-sin(degtorad(direction))*8;
speed=0;
with (objPipe) aux=0;
}
if pipe=1 pipe=0;
}


objHandle=player_collision_main_object(x,y,obj_walljumpleft)  //stop time and activate stage finish variable
if (objHandle!=noone){
action=action_walljump
}

objHandle=player_collision_main_object(x,y,obj_walljumpright)  //stop time and activate stage finish variable
if (objHandle!=noone){
action=action_walljump
}





</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Invincibility Handle</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
    // Handle invincibility
    if (invincibility_timer &gt; 0)
    {
        invincibility_timer -= 1;
        if (invincibility_timer == 0){ invincibility = 0 audio_stop_sound(bgm_invincibility)};
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Lightdash</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if distance_to_object(objLightRing) &lt; 70
{
if lightdash = true
{
x_speed=0
y_speed=0
near_ring=instance_nearest(x,y,objLightRing);
motion_set(point_direction(x,y,near_ring.x,near_ring.y),10)
animation_angle=point_direction(x,y,near_ring.x,near_ring.y)
}
}
else
{
if (homing=0 &amp;&amp; !pipe){ motion_set(0,0)}
lightdash=0
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Bug Fixes</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string> if y_speed &lt; 0 &amp;&amp; action == action_stomping
 action = action_spring_jump
 
 if action=action_crouch_down &amp;&amp; x_speed != 0 &amp;&amp; slide=0
action=action_rolling



if (animation = "balancingOut" || animation = "balancingIn") &amp;&amp; action = action_stomping
action = action_normal

if boost_amount &lt;0
boost_amount =0

if boost_amount &gt;120
boost_amount=120

if boost_amount = 0 &amp;&amp; instance_exists(obj_boost) || action = action_hurt{
with(obj_boost)
image_alpha -=0.20
}

if (ground || action = action_hurt) &amp;&amp; instance_exists(obj_stompfx){
with obj_stompfx
instance_destroy()
}


if y_speed &gt; 0&amp;&amp; homed
homed = false;


if y&gt;room_height instance_destroy()

if instance_exists(obj_boost) &amp;&amp; x_speed = 0 {
with obj_boost
instance_destroy()
}

if action = action_look_up &amp;&amp; x_speed != 0
action = action_normal

if animation = "skidding" &amp;&amp; canboost &amp;&amp; boosting ||  x_speed = 0 &amp;&amp; canboost &amp;&amp; boosting
canboost = false
else
canboost = true
if action=action_spring_hor{
image_angle = point_direction(last_x,last_y,x,y)
}
if lightdash==false &amp;&amp; action!=action_spring_hor{
animation_angle = relative_angle
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>others</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if player = PLAYER_SONIC{
player_boost()
}

if player=PLAYER_SHADOW{
player_shadowstomp()
player_boost()
}
if playermove = false &amp;&amp; ground{
x_speed = 0;
y_speed = 0;
}



//------------------After Image------------------\\

if (x_speed&gt;11 || x_speed&lt;-11) || (super || hyper || darkspine || speed_sneakers!=0) &amp;&amp; x_speed!=0
instance_create(x,y,afterimage)

//------------------Slide Speed------------------\\
if action = action_handle
x_speed = 0


if action=action_walljump{
y_speed -=0.05
x_speed = 0
}
if action=action_walljump &amp;&amp; key_action_pressed{
action=action_jumping
x_speed = 5*animation_direction
y_speed = -7
animation_angle=point_direction(x,y,x+x_speed*animation_direction,y+y_speed*animation_direction)
}



if action==action_dashed &amp;&amp; y_speed &lt;0
action=action_normal

if action==action_skid &amp;&amp; !slide
instance_create(xprevious,yprevious,obj_skidfx)


if action=action_trick{ 
if key_down_pressed || key_up_pressed || key_left_pressed||key_right_pressed{
//if instance_exists(objRainbowEffect){
//with objRainbowEffect
//instance_destroy()
//instance_create(x,y,objRainbowEffect)
//}else
//instance_create(x,y,objRainbowEffect)
y_acceleration =   0.2;  
instance_create(x,y-1,objOrb)
animation = choose("trick1","trick2","trick3","trick4","trick5")
}
}
if action=action_trick &amp;&amp; ground{
action=action_normal
y_acceleration =   0.2
}
if action=action_hurt &amp;&amp; ground &amp;&amp; !invincibility
invincibility = 2
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Pallete Changing</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !hyper{
pallete_pos=0
}

if hyper{
if pallete_pos&gt;339{
pallete_pos=1
}
pallete_pos+=0.99* delta_time * (90/1000000);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>action</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>action_stomping</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>1</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>obj_stompfx</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="4" ename="objCheckpointOpen">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.x_start = other.x;
global.y_start = other.y;
if global.checkpoint=0 global.checkpoint=1;</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
    // Draw. Here we call the drawing stuff. Of course, remember to use
    // floor(animation_frame) as the subframe index of the sprite, or
    // it might appear wrong
    //draw_text(floor(x+10),floor(y-8),x_speed)
    if hyper{
    set_pallete_change(sprHyperPallete, floor(pallete_pos), false);
    }    
    if boosting = true &amp;&amp; player=PLAYER_SONIC{
     //part_particles_create(global.particle1,x,y,global.particle1,2);
    }
    if boosting = true &amp;&amp; player=PLAYER_SHADOW{
     part_particles_create(global.particle3,x,y,global.particle3,2);
    }
    if action=action_spindash
    draw_sprite_ext(spr_spindashdust,global.game_time div 40,floor(x),floor(y),animation_direction*size,1*size,0,c_white,1);
    if (invincibility == 2)
    {
         if ((global.game_time div 40) mod 2)
         {         
         draw_sprite_ext(sprite,floor(animation_frame),floor(x),floor(y),animation_direction*size,1*size,animation_angle,image_blend,1);
         }
    }
    else
    {   
        if (invincibility != 1 &amp;&amp; shield == 2 &amp;&amp; action != action_shield) draw_sprite(sprShieldFire, (global.game_time div 50)*2+1, floor(x), floor(y));
        draw_sprite_ext(sprite, floor(animation_frame), floor(x), floor(y), animation_direction*size, 1*size,animation_angle, c_white,animation_alpha);  
        draw_set_blend_mode(bm_add)
        if (invincibility != 1)
            switch(shield)
            {
                case 1:
                if animation_direction=-1{
                    draw_sprite_ext(sprShieldNormal, global.game_time div 25,floor(x), floor(y),1, 1, 0, c_white, 0.9);
                    }else
                    draw_sprite_ext(sprShieldNormal, global.game_time div 25,floor(x+4.3), floor(y),1, 1, 0, c_white, 0.9);
                    break;
                case 2:
                    if (action != action_shield) draw_sprite(sprShieldFire, (global.game_time div 50)*2, floor(x), floor(y));
                    else draw_sprite_ext(sprShieldFireAction, global.game_time div 50, floor(x), floor(y),animation_direction, 1, 0, c_white, 1);
                    break;
                case 3:
                    draw_sprite(sprElectroShield, global.game_time div 55, floor(x), floor(y));
                    break;
                case 4:
                    if (action != action_shield) draw_sprite(sprShieldWater, global.game_time div 55, floor(x), floor(y));
                    else draw_sprite_ext(sprShieldWaterAction, 0, floor(x), floor(y),1, 1, 0, c_white, 1);
                    break;
            }
        else
        {
            draw_sprite(sprInvincibility, global.game_time div 50, floor(x), floor(y));
        }
        
        draw_set_blend_mode(bm_normal)
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_restart();   //for testing</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="66">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///gimme me booost
boost_amount=120
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="57">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>size+=0.5
x_acceleration+=0.01;
top_x_speed+=0.1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>size-=0.5
x_acceleration-=0.01;
top_x_speed-=0.1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="51">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>darkspine = false
hyper     = true
super     = false
if !audio_is_playing(bgmHyper)
aud_play_music(bgmHyper,global.bgmvolume,1)

audio_stop_sou(bgmDarkspine)
audio_stop_sou(bgmSuper)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>darkspine = false
hyper     = false
super     = true
if !audio_is_playing(bgmSuper)
aud_play_music(bgmSuper,global.bgmvolume,1)

audio_stop_sou(bgmDarkspine)
audio_stop_sou(bgmHyper)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="49">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>darkspine = true
hyper     = false
super     = false
if !audio_is_playing(bgmDarkspine)
aud_play_music(bgmDarkspine,global.bgmvolume,1)

audio_stop_sou(bgmSuper)
audio_stop_sou(bgmHyper)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="48">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>darkspine = false
hyper     = false
super     = false
audio_stop_sou(bgmDarkspine)
audio_stop_sou(bgmHyper)
audio_stop_sou(bgmSuper)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="46">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>telex=x
teley=y
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="45">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x=telex
y=teley
pipe=false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="18">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>player +=1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>player -=1
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
